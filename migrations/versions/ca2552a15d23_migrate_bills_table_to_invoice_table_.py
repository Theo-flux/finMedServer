"""migrate bills table to invoice table note.

Revision ID: ca2552a15d23
Revises: 3f27b9acbb32
Create Date: 2025-08-24 14:23:27.949916

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "ca2552a15d23"
down_revision: Union[str, None] = "3f27b9acbb32"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # First, drop the foreign key constraint that depends on the index
    op.drop_constraint("payments_bill_uid_fkey", "payments", type_="foreignkey")

    # Add the new invoice_uid column to payments
    op.add_column("payments", sa.Column("invoice_uid", sa.Uuid(), nullable=False))

    # Alter the reference_number column
    op.alter_column("payments", "reference_number", existing_type=sa.VARCHAR(), nullable=True)

    # Create the new foreign key to invoices table
    op.create_foreign_key(None, "payments", "invoices", ["invoice_uid"], ["uid"])

    # Drop the old bill_uid column
    op.drop_column("payments", "bill_uid")

    # Now we can safely drop the invoice table and its indexes
    op.drop_index(op.f("ix_invoice_serial_no"), table_name="invoice")
    op.drop_index(op.f("ix_invoice_uid"), table_name="invoice")
    op.drop_table("invoice")

    # Drop the bills table and its indexes
    op.drop_index(op.f("ix_bills_serial_no"), table_name="bills")
    op.drop_index(op.f("ix_bills_uid"), table_name="bills")
    op.drop_table("bills")

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Recreate the bills table first
    op.create_table(
        "bills",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("uid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("serial_no", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
        sa.Column("billed_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
        sa.Column("service_uid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("patient_uid", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("department_uid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("bill_type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("gross_amount", sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
        sa.Column("tax_amount", sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
        sa.Column("net_amount_due", sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["department_uid"], ["departments.uid"], name=op.f("bills_department_uid_fkey")),
        sa.ForeignKeyConstraint(["patient_uid"], ["patients.uid"], name=op.f("bills_patient_uid_fkey")),
        sa.ForeignKeyConstraint(["service_uid"], ["services.uid"], name=op.f("bills_service_uid_fkey")),
        sa.PrimaryKeyConstraint("id", name=op.f("bills_pkey")),
    )
    op.create_index(op.f("ix_bills_uid"), "bills", ["uid"], unique=True)
    op.create_index(op.f("ix_bills_serial_no"), "bills", ["serial_no"], unique=True)

    # Recreate the invoice table
    op.create_table(
        "invoice",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("uid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("serial_no", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
        sa.Column("billed_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
        sa.Column("service_uid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("patient_uid", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("department_uid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("bill_type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("gross_amount", sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
        sa.Column("tax_amount", sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
        sa.Column("net_amount_due", sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["department_uid"], ["departments.uid"], name=op.f("invoice_department_uid_fkey")),
        sa.ForeignKeyConstraint(["patient_uid"], ["patients.uid"], name=op.f("invoice_patient_uid_fkey")),
        sa.ForeignKeyConstraint(["service_uid"], ["services.uid"], name=op.f("invoice_service_uid_fkey")),
        sa.PrimaryKeyConstraint("id", name=op.f("invoice_pkey")),
    )
    op.create_index(op.f("ix_invoice_uid"), "invoice", ["uid"], unique=True)
    op.create_index(op.f("ix_invoice_serial_no"), "invoice", ["serial_no"], unique=True)

    # Now modify the payments table
    op.add_column("payments", sa.Column("bill_uid", sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, "payments", type_="foreignkey")
    op.create_foreign_key(op.f("payments_bill_uid_fkey"), "payments", "bills", ["bill_uid"], ["uid"])
    op.alter_column("payments", "reference_number", existing_type=sa.VARCHAR(), nullable=False)
    op.drop_column("payments", "invoice_uid")

    # ### end Alembic commands ###
